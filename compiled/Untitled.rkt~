#lang racket
(require (planet "sicp.ss" ("soegaard" "sicp.plt" 2 1)))


(define (accumulate op initial sequence)
  (if (null? sequence)
      initial
      (op (car sequence)
          (accumulate op initial (cdr sequence)))))

(define (enumerate-interval low high)
  (if (> low high)
      null
      (cons low (enumerate-interval (+ low 1) high))))

;Nested maps

;(accumulate append null
 ;           (map (lambda (i)
  ;                 (map (lambda (j) (list i j))
   ;                     (enumerate-interval 1 (- i 1))))
    ;             (enumerate-interval 1 n)))

(define (flatmap proc seq)
  (accumulate append null (map proc seq)))

;(define (prime-sum? pair)
 ; (prime? (+ (car prime) (cadr pair))))

;(define (make-pair-sum pair)
 ; (list (car pair) (cadr pair)  (+ (car pair) (cadr pair))))

;(define (prime-sum-pairs n)
 ; (map make-pair-sum
  ;      (filter prime-sum?
   ;             (flatmap
     ;            (lambda (i)
    ;               (map (lambda (j) (list i j))
      ;                  (enumerate-interval 1 (- i 1))))
       ;          (enumerate-interval 1)))))


;2.40

(define (smallest-divisor n)
   (find-divisor n 2))

(define (find-divisor n test-divisor)
   (cond ((> (square test-divisor) n) n)
         ((divides? test-divisor n) test-divisor)
         (else (find-divisor n (+ test-divisor 1)))))

(define (divides? a b)
   (= (remainder b a) 0))

(define (square x)
   (* x x))

(define (prime? n)
   (= n (smallest-divisor n)))

(define (unique-pairs n)
  (flatmap (lambda (i)
             (map (lambda (j) (list i j))
                  (enumerate-interval 1 (- i 1))))
           (enumerate-interval 1 n)))

(define (prime-sum? pair)
(prime? (+ (car pair) (cadr pair))))

(define (make-pair-sum pair)
(list (car pair) (cadr pair) (+ (car pair) (cadr pair))))

(define (prime-sum-pairs n)
  (map make-pair-sum
       (filter prime-sum?
               (unique-pairs n))))

;(prime-sum-pairs 7)

;2.41

(define (triples-generator n)
  (flatmap (lambda (i)
             (flatmap (lambda (j)
                        (map (lambda (k) (list i j k))
                             (enumerate-interval 1 (- j 1))))
                        (enumerate-interval 1 (- i 1))))
             (enumerate-interval 1 n)))

(define (equal-to-a-sum n s)
  (filter (lambda (x) (= (accumulate + 0 x) s)) (triples-generator n)))

(triples-generator 4)
(equal-to-a-sum 15 16)


;2.42 - 2.43 undone

(define empty-board (list))

;(define (queens board-size)
 ; (define (queen-cols k)
  ;  (if (= k 0)
   ;     (list empty-board)
    ;    (filter
     ;    (lambda (positions) (safe? k positions))
      ;;   (flatmap
        ;  (lambda (rest-of-queens)
         ;   (map (lambda (new-row)
          ;         (adjoin-position new-row k rest-of-queens))
           ;      (enumerate-interval 1 board-size)))
          ;(queen-cols (- k 1))))))
  ;(queen-cols board-size))


;2.2.4

(define wave2 (beside wave (flip-vert wave)))