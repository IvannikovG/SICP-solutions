#lang sicp

(define (for-each-except exception procedure list)
  (define (loop items)
    (cond ((null? items) 'done)
	  ((eq? (car items) exception) (loop (cdr items)))
	  (else (procedure (car items))
		(loop (cdr items)))))
  (loop list))

;; constrains
(define (inform-about-value constraint)
  (constraint 'I-have-a-value))

(define (inform-about-no-value constraint)
  (constraint 'I-lost-my-value))

;; connector
(define (has-value? connector)
  (connector 'has-value?))

(define (get-value connector)
  (connector 'value))

(define (set-value! connector new-value informant)
  ((connector 'set-value!) new-value informant))

(define (forget-value! connector retractor)
  ((connector 'forget) retractor))

(define (connect connector new-constraint)
  ((connector 'connect) new-constraint))

(define (make-connector)
  (let ((value false) (informant false) (constraints '()))
    (define (set-my-value newval setter)
      (cond ((not (has-value? me))
	     (set! value newval)
	     (set! informant setter)
	     (for-each-except setter
			      inform-about-value
			      constraints))
	    ((not (= value newval))
	     (error "Contradiction" (list value newval)))
	    (else 'ignored)))
    (define (forget-my-value retractor)
      (if (eq? retractor informant)
	  (begin (set! informant false)
		 (for-each-except retractor
				  inform-about-no-value
				  constraints))
	  'ignored))
    (define (connect new-constraint)
      (if (not (memq new-constraint constraints))
	  (set! constraints
		(cons new-constraint constraints)))
      (if (has-value? me)
	  (inform-about-value new-constraint))
      'done)
    (define (me request)
      (cond ((eq? request 'has-value?)
	     (if informant true false))
	    ((eq? request 'value) value)
	    ((eq? request 'set-value!) set-my-value)
	    ((eq? request 'forget) forget-my-value)
	    ((eq? request 'connect) connect)
	    (else (error "Unknown operation -- CONNECTOR"
			 request))))
    me))

(define (adder a1 a2 sum)
  (define (process-new-value)
    (cond ((and (has-value? a1) (has-value? a2))
	   (set-value! sum
		       (+ (get-value a1) (get-value a2))
		       me))
	  ((and (has-value? a1) (has-value? sum))
	   (set-value! a2
		       (- (get-value sum) (get-value a1))
		       me))
	  ((and (has-value? a2) (has-value? sum))
	   (set-value! a1
		       (- (get-value sum) (get-value a2))
		       me))))
  (define (process-forget-value)
    (forget-value! sum me)
    (forget-value! a1 me)
    (forget-value! a2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
	   (process-new-value))
	  ((eq? request 'I-lost-my-value)
	   (process-forget-value))
	  (else
	   (error "Unknown request -- ADDER" request))))
  (connect a1 me)
  (connect a2 me)
  (connect sum me)
  me)

(define (multiplier m1 m2 product)
  (define (process-new-value)
    (cond ((or (and (has-value? m1) (= (get-value m1) 0))
	       (and (has-value? m2) (= (get-value m2) 0)))
	   (set-value! product 0 me))
	  ((and (has-value? m1) (has-value? m2))
	   (set-value! product
		       (* (get-value m1) (get-value m2))
		       me))
	  ((and (has-value? product) (has-value? m1))
	   (set-value! m2
		       (/ (get-value product) (get-value m1))
		       me))
	  ((and (has-value? product) (has-value? m2))
	   (set-value! m1
		       (/ (get-value product) (get-value m2))
		       me))))
  (define (process-forget-value)
    (forget-value! product me)
    (forget-value! m1 me)
    (forget-value! m2 me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
	   (process-new-value))
	  ((eq? request 'I-lost-my-value)
	   (process-forget-value))
	  (else
	   (error "Unknown request -- MULTIPLIER" request))))
  (connect m1 me)
  (connect m2 me)
  (connect product me)
  me)

(define (constant value connector)
  (define (me request)
    (error "Unknown request -- CONSTANT" request))
  (connect connector me)
  (set-value! connector value me)
  me)

(define (probe name connector)
  (define (print-probe value)
    (newline)
    (display "Probe: ")
    (display name)
    (display " = ")
    (display value))
  (define (process-new-value)
    (print-probe (get-value connector)))
  (define (process-forget-value)
    (print-probe "?"))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
	   (process-new-value))
	  ((eq? request 'I-lost-my-value)
	   (process-forget-value))
	  (else
	   (error "Unknown request -- PROBE" request))))
  (connect connector me)
  me)

(define (averager a b c)
  (let ((l (make-connector))
        (av (make-connector)))
    (adder a b l)
    (constant 0.5 av)
    (multiplier l av c)
    'ok))

(define A (make-connector))
(define B (make-connector))
(define AVERAGE (make-connector))

;(averager A B AVERAGE)

;(probe "A" A)
(probe "B" B)
(probe "AVERAGE" AVERAGE)

(set-value! A 10 'user)
(set-value! B 5 'user)
(forget-value! B 'user)
(set-value! B 10 'user)

;3.35
(define (squarer a b)
  (define (process-new-value)
    (if (has-value? b)
        (if (< (get-value b) 0)
        (error "square is less than 0 -- SQUARER" (get-value b))
        (set-value! a (sqrt (get-value b))
                    me))
        (set-value! b (* (get-value a) (get-value a))
                    me)))
    (define (process-forget-value)
      (forget-value! a me)
      (forget-value! b me)
      (process-new-value))
    (define (me request)
      (cond ((eq? request 'I-have-a-value)
             (process-new-value))
            ((eq? request 'I-lost-my-value)
	     (process-forget-value))
	    (else
	     (error "Unknown request" request))))
  (connect a me)
  (connect b me)
  me)
      
;3.37

(define (substractor a1 a2 sub)
  (define (process-new-value)
    (cond ((and (has-value? a1) (has-value? a2))
           (set-value! sub (- (get-value a1) (get-value a2))
                       me))
          ((and (has-value? a1) (has-value? sub))
           (set-value! a2 (+ (get-value a1) (get-value sub))
                       me))
          ((and (has-value? a2) (has-value? sub))
           (set-value! a1 (+ (get-value a2) (get-value sub))
                       me))))
  (define (process-forget-value)
    (forget-value! a1 me)
    (forget-value! a2 me)
    (forget-value! sub me)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value) (process-new-value))
          ((eq? request 'I-lost-my-value) (process-forget-value))
          (else (error "Unbound request --- SUBSTRACTOR" request))))
  (connect a1 me)
  (connect a2 me)
  (connect sub me)
  me)

(define (divisor d1 d2 div)
  (define (process-new-value)
    (cond 
          ((and (has-value? d1) (has-value? d2))
           (if (= (get-value d2) 0)
               (error "Division by ZERO! --- DIVISOR" (get-value d2))
               (set-value! div (/ (get-value d1) (get-value d2))
                           me)))
          ((and (has-value? d1) (has-value? div))
           (set-value! d2 (/ (get-value d1) (get-value div))
                       me))
          ((and (has-value? d2) (has-value? div))
           (set-value! d1 (* (get-value d2) (get-value div))
                       me))))
  (define (process-forget-value)
    (forget-value! d1)
    (forget-value! d2)
    (forget-value! div)
    (process-new-value))
  (define (me request)
    (cond ((eq? request 'I-have-a-value)
	   (process-new-value))
	  ((eq? request 'I-lost-my-value)
	   (process-forget-value))
	  (else
	   (error "Unknown request -- DIVISOR" request))))
  (connect d1 me)
  (connect d2 me)
  (connect div me)
  me)

(define k (make-connector))
(define p (make-connector))
(define j (make-connector))

(define division (make-connector))

(divisor k p j)

(set-value! k 100 'user)
(set-value! p 10 'user)
;(set-value! j 4 'user)
(probe "k" k)
(probe "p" p)
(get-value j)
(probe "division" division)

(probe "j" j)
;(forget-value! B 'user)
;(set-value! B 10 'user)

(define (c+ x y)
  (let ((z (make-connector)))
    (adder x y z)
    z))

(define (c- x y)
  (let ((z (make-connector)))
    (substractor x y z)
    z))

(define (c* x y)
  (let ((z (make-connector)))
    (multiplier x y z)
    z))

(define (c/ x y)
  (let ((z (make-connector)))
    (divisor x y z)
    z))

(define (cv number)
  (let ((z (make-connector)))
    (constant number z)
    z))

(define (celsius-fahrenheit-converter x)
  (c+ (c* (c/ (cv 9) (cv 5))
          x)
      (cv 32)))

(define C (make-connector))
(define F (celsius-fahrenheit-converter C))
(set-value! C 25 'user)

(probe 'cel C)
(probe 'fah F)

(forget-value! C 'user)
; Probe: cel = ?
; Probe: fah = ?

(set-value! C 35 'user)
; Probe: cel = 35
; Probe: fah = 95