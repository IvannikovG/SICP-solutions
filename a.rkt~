#lang racket

(define (timed-prime-test n)
   (newline)
   (display n)
   (start-prime-test n (current-seconds)))


(define (start-prime-test n start-time)
  (if (prime? n)
      (report-prime (- (current-seconds) start-time))
      false))


(define (prime? n) (= n (smallest-divisor n)))


(define (smallest-divisor n) (find-divisor n 2))


(define (find-divisor n test-divisor)
  (cond ((> (square test-divisor) n) n)
        ((divides? test-divisor n) test-divisor)
        (else (find-divisor n (+ test-divisor 1)))))


(define (square x) (* x x))


(define (divides? a b) (= (remainder b a) 0))


(define (report-prime elapsed-time)
  (display " *** ")
  (display elapsed-time))


(define (iseven? n)
  (= (remainder n 2) 0))

(provide square timed-prime-test start-prime-test prime? smallest-divisor divides? report-prime iseven?)


           
      
                      
                          